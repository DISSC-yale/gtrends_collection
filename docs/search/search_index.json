{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Google Trends Collection Framework","text":"<p>This is in part a simple Python package to handle collection from the Google Trends beta research API, and a minimal framework to organize historical and continuous collection.</p>"},{"location":"#data","title":"Data","text":"<p>A selection of data are collected in the <code>data</code> directory, and are updated weekly.</p> <p>The selection is defined by the files in the <code>scope</code> directory.</p>"},{"location":"#local-use","title":"Local Use","text":"<p>To work with the data locally, you can clone this repository:</p> <pre><code>git clone --depth=1 https://github.com/DISSC-yale/gtrends_collection.git\n</code></pre> <p>Then load the data in Python:</p> <pre><code>from pyarrow.dataset import dataset\n\ndata = dataset(\"gtrends_collection/data\").to_table().to_pandas()\n</code></pre> <p>or R:</p> <pre><code>library(arrow)\n\ndata &lt;- open_dataset(\"gtrends_collection/data\") |&gt; dplyr::collect()\n</code></pre>"},{"location":"#collection","title":"Collection","text":"<p>The <code>scripts/historical_collection.py</code> script is used to collect full histories based on the scope files:</p> <pre><code>python scripts/historical_collection.py\n</code></pre> <p>The <code>scripts/weekly_collection.py</code> script is used by the GitHub Actions workflow to add new data each week.</p>"},{"location":"#authentication","title":"Authentication","text":"<p>A developer key is required to collect from the beta API.</p> <p>This can either be set to the <code>GOOGLE_API_KEY</code> environment variable, or stored in an <code>.env</code> file:</p> <pre><code>GOOGLE_API_KEY=AlphanumericKey\n</code></pre>"},{"location":"Collector/","title":"Collection Mechanism","text":"<p>Collect internet search volumes from the Google Trends timeline for health endpoint.</p> <p>See the schema for more about the API. Only the <code>getTimelinesForHealth</code> endpoint is used here.</p> <p>Parameters:</p> Name Type Description Default <code>scope_dir</code> <code>str</code> <p>Directory containing the <code>terms.txt</code> and <code>locations.txt</code> files. See Specification.</p> <code>'scope'</code> <code>key_dir</code> <code>str</code> <p>Directory containing a <code>.env</code> file, to extract the <code>GOOGLE_API_KEY</code> variable from, if it is not already in the environment.</p> <code>'.'</code> <code>terms_per_batch</code> <code>int</code> <p>Maximum terms to include in each collection batch. Theoretically 30 is the API's max, but more than 1 seems to not work.</p> <code>1</code> <code>wait_time</code> <code>float</code> <p>Seconds to wait between each batch.</p> <code>0.1</code> <code>version</code> <code>str</code> <p>Version of the service API.</p> <code>'v1beta'</code> Specification <p>To process in batches, search terms and locations must be specified in separate files (<code>terms.txt</code> and <code>locations.txt</code>), stored in the <code>scope_dir</code> directory. These should contain 1 term / location code per line.</p> Collection Process <p>Initializing this class retrieves the Google API service, stores the developer key, and points to the scope directory.</p> <p>The <code>process_batches()</code> method reads in the terms and locations, and collects them in batches over the specified time frame.</p> <p>Results from each batch are stored in the <code>batches</code> property, which can be pulled from in case the <code>process_batches</code> process does not complete (such as if the daily rate limit is reached).</p> <p>The <code>collect()</code> method collects a single batch, and can be used on its own.</p> <p>Examples:</p> <pre><code>from gtrends_collection import Collector\n\n# initialize the collector\ncollector = Collector()\n</code></pre> Source code in <code>src\\gtrends_collection\\collector.py</code> <pre><code>class Collector:\n    \"\"\"\n    Collect internet search volumes from the Google Trends timeline for health endpoint.\n\n    See the [schema](https://trends.googleapis.com/$discovery/rest?version=v1beta)\n    for more about the API. Only the `getTimelinesForHealth` endpoint is used here.\n\n    Args:\n        scope_dir (str): Directory containing the `terms.txt` and `locations.txt` files.\n            See Specification.\n        key_dir (str): Directory containing a `.env` file, to extract the\n            `GOOGLE_API_KEY` variable from, if it is not already in the environment.\n        terms_per_batch (int): Maximum terms to include in each collection batch.\n            Theoretically 30 is the API's max, but more than 1 seems to not work.\n        wait_time (float): Seconds to wait between each batch.\n        version (str): Version of the service API.\n\n    Specification:\n        To process in batches, search terms and locations must be specified in separate\n        files (`terms.txt` and `locations.txt`), stored in the `scope_dir` directory.\n        These should contain 1 term / location code per line.\n\n    Collection Process:\n        Initializing this class retrieves the Google API service, stores the\n        developer key, and points to the scope directory.\n\n        The `process_batches()` method reads in the terms and locations,\n        and collects them in batches over the specified time frame.\n\n        Results from each batch are stored in the `batches` property,\n        which can be pulled from in case the `process_batches` process does not complete\n        (such as if the daily rate limit is reached).\n\n        The `collect()` method collects a single batch, and\n        can be used on its own.\n\n    Examples:\n        ```python\n        from gtrends_collection import Collector\n\n        # initialize the collector\n        collector = Collector()\n        ```\n    \"\"\"\n\n    # time to wait between requests\n    _regular_wait_time = 1\n    # time to wait after a `rateLimitExceeded` error\n    _fallback_wait_time = 2\n    batches: ClassVar[List[DataFrame]] = []\n\n    scope_dir = \"scope\"\n    max_terms = 1\n\n    def __init__(self, scope_dir=\"scope\", key_dir=\".\", terms_per_batch=1, wait_time=0.1, version=\"v1beta\"):\n        self._regular_wait_time = wait_time\n        self.scope_dir = scope_dir\n        self.max_terms = terms_per_batch\n\n        key = getenv(\"GOOGLE_API_KEY\")\n        if not key and isfile(f\"{key_dir}/.env\"):\n            with open(f\"{key_dir}/.env\", encoding=\"utf-8\") as content:\n                for pair in content.read().split(\"\\n\"):\n                    name, value = pair.split(\"=\")\n                    if name.startswith(\"GOOGLE_API_KEY\"):\n                        key = value.strip()\n                        break\n        if not key:\n            msg = \"no API key found (GOOGLE_API_KEY environment variable)\"\n            raise RuntimeError(msg)\n\n        self.service = discovery.build(\n            \"trends\",\n            version,\n            discoveryServiceUrl=f\"https://trends.googleapis.com/$discovery/rest?version={version}\",\n            developerKey=key,\n        )\n\n    def process_batches(\n        self,\n        start: Union[str, None] = None,\n        end: Union[str, None] = None,\n        resolution=\"week\",\n        override_terms: Union[List[str], None] = None,\n        override_location: Union[List[str], None] = None,\n    ) -&gt; DataFrame:\n        \"\"\"\n        Processes collection batches from scope.\n\n        Args:\n            start (str | None): First date to collect from; `YYYY-MM-DD`.\n            end (str | None): Last date to collect from; `YYYY-MM-DD`.\n            resolution (str): Collection resolution; `day`, `week`, `month`, or `year`.\n            override_terms (str): List of terms to collect instead of those in scope.\n                Useful for changing collection order or filling out select terms.\n            override_location (str): List of locations to collect from instead of those in scope.\n\n        Examples:\n            ```python\n            # collect across all scope-defined terms and locations in 2024\n            data = collector.process_batches(\"2024-01-01\", \"2024-12-31\")\n            ```\n\n        Returns:\n            A `pandas.DataFrame` of the combined results.\n        \"\"\"\n\n        params: Dict[str, Union[List[str], str]] = {\"timelineResolution\": resolution}\n        if start:\n            params[\"time_startDate\"] = start\n        if end:\n            params[\"time_endDate\"] = end\n\n        if override_terms:\n            terms = override_terms\n        else:\n            with open(f\"{self.scope_dir}/terms.txt\", encoding=\"utf-8\") as content:\n                terms = [term.strip() for term in content.readlines()]\n\n        locations = override_location if override_location else self._get_locations()\n\n        for term_set in range(0, len(terms), self.max_terms):\n            for location in locations:\n                loc = location if len(location) &lt; 9 else location.split(\"-\")[2]\n                batch_params = {\n                    \"terms\": terms[term_set : (term_set + self.max_terms)],\n                    **params,\n                }\n                batch_params[_location_type(loc)] = loc\n                batch = self.collect(loc, batch_params)\n                self.batches.append(batch)\n                sleep(self._regular_wait_time)\n\n        data = concat(self.batches)\n        return data\n\n    def collect(\n        self,\n        location: str,\n        params: Dict[str, Union[List[str], str]],\n    ) -&gt; DataFrame:\n        \"\"\"\n        Collect a single batch.\n\n        Args:\n            location (str): Country (e.g., `US`), region (state; e.g., `US-AL`),\n                or DMA (metro area; e.g., `US-AL-630` or `630`) code.\n            params (dict[str, list[str] | str]): A dictionary with the following entries:\n\n                * `terms` (list[str]): List of terms to collect.\n                * `timelineResolution` (str): Collection resolution; `day`, `week`, `month`, or `year`.\n                * `time_startDate` (str): First date to collect from; `YYYY-MM-DD`.\n                * `time_endDate` (str): First date to collect from; `YYYY-MM-DD`.\n\n        Examples:\n            ```python\n            # collect a small, custom sample\n            data = collector.collect(\n                \"US-NY\",\n                {\n                    \"terms\": [\"cough\", \"/m/01b_21\"],\n                    \"timelineResolution\": \"month\",\n                    \"time_startDate\": \"2014-01-01\",\n                    \"time_endDate\": \"2024-01-01\",\n                },\n            )\n            ```\n\n        Returns:\n            A `pandas.DataFrame` of the prepared results, with these columns:\n\n                * `value`: Number indicating search volume.\n                * `date`: Date the searches were recorded on.\n                * `location`: Location code in which searches were recorded from.\n                * `term`: The search term.\n        \"\"\"\n\n        try:\n            # pylint: disable=E1101\n            response = self.service.getTimelinesForHealth(**params).execute()\n        except errors.HttpError as e:\n            if e.reason == \"rateLimitExceeded\":\n                sleep(self._fallback_wait_time)\n                response = self.collect(location, params)\n            else:\n                raise e\n        data = []\n        for line in response[\"lines\"]:\n            points = json_normalize(line[\"points\"])\n            points[\"location\"] = location\n            points[\"term\"] = line[\"term\"]\n            data.append(points)\n        return concat(data)\n\n    def _get_locations(self) -&gt; List[str]:\n        with open(f\"{self.scope_dir}/locations.txt\", encoding=\"utf-8\") as content:\n            locations = [code.strip() for code in content.readlines()]\n        return locations\n\n    def full_metro_area_codes(self, locations: List[str]) -&gt; List[str]:\n        \"\"\"\n        Adds country and state codes to metro area codes (e.g., `630` becomes `US-AL-630`),\n        based on `scope_dir/locations.txt`.\n\n        Args:\n            locations (List[str]): Locations to potentially prepend full location codes to.\n\n        Examples:\n            ```python\n            collector.full_metro_area_codes([\"630\", \"522\"])\n            ```\n\n        Returns:\n            A version of `locations` with any matching locations expanded.\n        \"\"\"\n        location_map: Dict[str, str] = {}\n        for location in self._get_locations():\n            if len(location) == 9:\n                location_parts = location.split(\"-\")\n                location_map[location_parts[2]] = location\n        return [location_map.get(loc, loc) for loc in locations]\n</code></pre>"},{"location":"Collector/#gtrends_collection.Collector.collect","title":"<code>collect(location, params)</code>","text":"<p>Collect a single batch.</p> <p>Parameters:</p> Name Type Description Default <code>location</code> <code>str</code> <p>Country (e.g., <code>US</code>), region (state; e.g., <code>US-AL</code>), or DMA (metro area; e.g., <code>US-AL-630</code> or <code>630</code>) code.</p> required <code>params</code> <code>dict[str, list[str] | str]</code> <p>A dictionary with the following entries:</p> <ul> <li><code>terms</code> (list[str]): List of terms to collect.</li> <li><code>timelineResolution</code> (str): Collection resolution; <code>day</code>, <code>week</code>, <code>month</code>, or <code>year</code>.</li> <li><code>time_startDate</code> (str): First date to collect from; <code>YYYY-MM-DD</code>.</li> <li><code>time_endDate</code> (str): First date to collect from; <code>YYYY-MM-DD</code>.</li> </ul> required <p>Examples:</p> <pre><code># collect a small, custom sample\ndata = collector.collect(\n    \"US-NY\",\n    {\n        \"terms\": [\"cough\", \"/m/01b_21\"],\n        \"timelineResolution\": \"month\",\n        \"time_startDate\": \"2014-01-01\",\n        \"time_endDate\": \"2024-01-01\",\n    },\n)\n</code></pre> <p>Returns:</p> Type Description <code>DataFrame</code> <p>A <code>pandas.DataFrame</code> of the prepared results, with these columns:</p> <ul> <li><code>value</code>: Number indicating search volume.</li> <li><code>date</code>: Date the searches were recorded on.</li> <li><code>location</code>: Location code in which searches were recorded from.</li> <li><code>term</code>: The search term.</li> </ul> Source code in <code>src\\gtrends_collection\\collector.py</code> <pre><code>def collect(\n    self,\n    location: str,\n    params: Dict[str, Union[List[str], str]],\n) -&gt; DataFrame:\n    \"\"\"\n    Collect a single batch.\n\n    Args:\n        location (str): Country (e.g., `US`), region (state; e.g., `US-AL`),\n            or DMA (metro area; e.g., `US-AL-630` or `630`) code.\n        params (dict[str, list[str] | str]): A dictionary with the following entries:\n\n            * `terms` (list[str]): List of terms to collect.\n            * `timelineResolution` (str): Collection resolution; `day`, `week`, `month`, or `year`.\n            * `time_startDate` (str): First date to collect from; `YYYY-MM-DD`.\n            * `time_endDate` (str): First date to collect from; `YYYY-MM-DD`.\n\n    Examples:\n        ```python\n        # collect a small, custom sample\n        data = collector.collect(\n            \"US-NY\",\n            {\n                \"terms\": [\"cough\", \"/m/01b_21\"],\n                \"timelineResolution\": \"month\",\n                \"time_startDate\": \"2014-01-01\",\n                \"time_endDate\": \"2024-01-01\",\n            },\n        )\n        ```\n\n    Returns:\n        A `pandas.DataFrame` of the prepared results, with these columns:\n\n            * `value`: Number indicating search volume.\n            * `date`: Date the searches were recorded on.\n            * `location`: Location code in which searches were recorded from.\n            * `term`: The search term.\n    \"\"\"\n\n    try:\n        # pylint: disable=E1101\n        response = self.service.getTimelinesForHealth(**params).execute()\n    except errors.HttpError as e:\n        if e.reason == \"rateLimitExceeded\":\n            sleep(self._fallback_wait_time)\n            response = self.collect(location, params)\n        else:\n            raise e\n    data = []\n    for line in response[\"lines\"]:\n        points = json_normalize(line[\"points\"])\n        points[\"location\"] = location\n        points[\"term\"] = line[\"term\"]\n        data.append(points)\n    return concat(data)\n</code></pre>"},{"location":"Collector/#gtrends_collection.Collector.full_metro_area_codes","title":"<code>full_metro_area_codes(locations)</code>","text":"<p>Adds country and state codes to metro area codes (e.g., <code>630</code> becomes <code>US-AL-630</code>), based on <code>scope_dir/locations.txt</code>.</p> <p>Parameters:</p> Name Type Description Default <code>locations</code> <code>List[str]</code> <p>Locations to potentially prepend full location codes to.</p> required <p>Examples:</p> <pre><code>collector.full_metro_area_codes([\"630\", \"522\"])\n</code></pre> <p>Returns:</p> Type Description <code>List[str]</code> <p>A version of <code>locations</code> with any matching locations expanded.</p> Source code in <code>src\\gtrends_collection\\collector.py</code> <pre><code>def full_metro_area_codes(self, locations: List[str]) -&gt; List[str]:\n    \"\"\"\n    Adds country and state codes to metro area codes (e.g., `630` becomes `US-AL-630`),\n    based on `scope_dir/locations.txt`.\n\n    Args:\n        locations (List[str]): Locations to potentially prepend full location codes to.\n\n    Examples:\n        ```python\n        collector.full_metro_area_codes([\"630\", \"522\"])\n        ```\n\n    Returns:\n        A version of `locations` with any matching locations expanded.\n    \"\"\"\n    location_map: Dict[str, str] = {}\n    for location in self._get_locations():\n        if len(location) == 9:\n            location_parts = location.split(\"-\")\n            location_map[location_parts[2]] = location\n    return [location_map.get(loc, loc) for loc in locations]\n</code></pre>"},{"location":"Collector/#gtrends_collection.Collector.process_batches","title":"<code>process_batches(start=None, end=None, resolution='week', override_terms=None, override_location=None)</code>","text":"<p>Processes collection batches from scope.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>str | None</code> <p>First date to collect from; <code>YYYY-MM-DD</code>.</p> <code>None</code> <code>end</code> <code>str | None</code> <p>Last date to collect from; <code>YYYY-MM-DD</code>.</p> <code>None</code> <code>resolution</code> <code>str</code> <p>Collection resolution; <code>day</code>, <code>week</code>, <code>month</code>, or <code>year</code>.</p> <code>'week'</code> <code>override_terms</code> <code>str</code> <p>List of terms to collect instead of those in scope. Useful for changing collection order or filling out select terms.</p> <code>None</code> <code>override_location</code> <code>str</code> <p>List of locations to collect from instead of those in scope.</p> <code>None</code> <p>Examples:</p> <pre><code># collect across all scope-defined terms and locations in 2024\ndata = collector.process_batches(\"2024-01-01\", \"2024-12-31\")\n</code></pre> <p>Returns:</p> Type Description <code>DataFrame</code> <p>A <code>pandas.DataFrame</code> of the combined results.</p> Source code in <code>src\\gtrends_collection\\collector.py</code> <pre><code>def process_batches(\n    self,\n    start: Union[str, None] = None,\n    end: Union[str, None] = None,\n    resolution=\"week\",\n    override_terms: Union[List[str], None] = None,\n    override_location: Union[List[str], None] = None,\n) -&gt; DataFrame:\n    \"\"\"\n    Processes collection batches from scope.\n\n    Args:\n        start (str | None): First date to collect from; `YYYY-MM-DD`.\n        end (str | None): Last date to collect from; `YYYY-MM-DD`.\n        resolution (str): Collection resolution; `day`, `week`, `month`, or `year`.\n        override_terms (str): List of terms to collect instead of those in scope.\n            Useful for changing collection order or filling out select terms.\n        override_location (str): List of locations to collect from instead of those in scope.\n\n    Examples:\n        ```python\n        # collect across all scope-defined terms and locations in 2024\n        data = collector.process_batches(\"2024-01-01\", \"2024-12-31\")\n        ```\n\n    Returns:\n        A `pandas.DataFrame` of the combined results.\n    \"\"\"\n\n    params: Dict[str, Union[List[str], str]] = {\"timelineResolution\": resolution}\n    if start:\n        params[\"time_startDate\"] = start\n    if end:\n        params[\"time_endDate\"] = end\n\n    if override_terms:\n        terms = override_terms\n    else:\n        with open(f\"{self.scope_dir}/terms.txt\", encoding=\"utf-8\") as content:\n            terms = [term.strip() for term in content.readlines()]\n\n    locations = override_location if override_location else self._get_locations()\n\n    for term_set in range(0, len(terms), self.max_terms):\n        for location in locations:\n            loc = location if len(location) &lt; 9 else location.split(\"-\")[2]\n            batch_params = {\n                \"terms\": terms[term_set : (term_set + self.max_terms)],\n                **params,\n            }\n            batch_params[_location_type(loc)] = loc\n            batch = self.collect(loc, batch_params)\n            self.batches.append(batch)\n            sleep(self._regular_wait_time)\n\n    data = concat(self.batches)\n    return data\n</code></pre>"},{"location":"Data/","title":"Data","text":"<p>Summaries of the data collected as of 08:07:04 PM UTC on 2025-03-06</p>"},{"location":"Data/#dates","title":"Dates","text":"min max /g/11hy9m64ws Apr 01 2007 Sep 30 2018 /m/0b7k33 Apr 01 2007 Sep 30 2018 /m/0cycc Apr 01 2007 Sep 30 2018 bronchiolitis Apr 01 2007 Sep 30 2018 influenza Apr 01 2007 Sep 30 2018 nirsevimab Apr 01 2007 Sep 30 2018 rsv Apr 01 2007 Sep 30 2018"},{"location":"Data/#values","title":"Values","text":"min mean std max /g/11hy9m64ws 0 80.9804 5889.15 4.43483e+06 /m/0b7k33 0 52.1221 4624.37 2.0774e+06 /m/0cycc 0 2475.19 6523.32 1.76359e+06 bronchiolitis 0 50.462 5464.18 2.643e+06 influenza 0 186.193 3660.83 1.36259e+06 nirsevimab 0 33.832 2763.01 1.32526e+06 rsv 0 278.41 3065.48 1.17503e+06"},{"location":"Data/#observations-by-location","title":"Observations By Location","text":"/g/11hy9m64ws /m/0b7k33 /m/0cycc bronchiolitis influenza nirsevimab rsv US-AL 4426 4426 4426 4426 4426 4426 3320 US-AL-630 4424 4424 4424 4424 4424 4424 3318 US-GA-522 8848 8848 8848 8848 8848 8848 6636 US-GA-606 8848 8848 8848 8848 8848 8848 6636 US-AL-691 4424 4424 4424 4424 4424 4424 3318 US-MS-711 8848 8848 8848 8848 7742 6636 6636 US-FL-686 8848 8848 8848 8848 8848 8848 6636 US-AL-698 4424 4424 4424 4424 4424 4424 3318 US-AK 4424 4424 4424 4424 4424 4424 3318 US-AK-743 4424 4424 4424 4424 4424 4424 3318 US-AK-745 4424 4424 4424 4424 4424 4424 3318 US-AK-747 4424 4424 4424 4424 4424 4424 3318 US-AZ 4424 4424 4424 4424 4424 4424 3318 US-AZ-753 4424 4424 4424 4424 4424 4424 3318 US-AZ-789 4424 4424 4424 4424 4424 4424 3318 US-CA-771 8848 8848 8848 8848 8848 8848 6636 US-AR 4424 4424 4424 4424 4424 4424 3318 US-OK-670 8848 8848 8848 8848 7742 6636 6636 US-AR-734 4424 4424 4424 4424 4424 4424 3318 US-AR-693 4424 4424 4424 4424 4424 4424 3318 US-TN-640 13272 13272 13272 13272 11060 7742 9954 US-LA-628 8848 8848 8848 8848 7742 6636 6636 US-TX-612 13272 13272 13272 13272 11060 7742 9954 US-MO-619 8848 8848 8848 8848 7742 6636 6636 US-CA 4424 4424 4424 4424 4424 4424 3318 US-CA-800 4424 4424 4424 4424 4424 4424 3318 US-CA-868 4424 4424 4424 4424 4424 4424 3318 US-CA-802 4424 4424 4424 4424 4424 4424 3318 US-CA-866 4424 4424 4424 4424 4424 4424 3318 US-CA-803 4424 4424 4424 4424 4424 4424 3318 US-OR-813 8848 8848 8848 8848 7742 6636 6636 US-CA-828 4424 4424 4424 4424 4424 4424 3318 US-CA-804 4424 4424 4424 4424 4424 4424 3318 US-NV-811 8848 8848 8848 8848 7742 6636 6636 US-CA-862 4424 4424 4424 4424 4424 4424 3318 US-CA-825 4424 4424 4424 4424 4424 4424 3318 US-CA-807 4424 4424 4424 4424 4424 4424 3318 US-CA-855 4424 4424 4424 4424 4424 4424 3318 US-CO 4424 4424 4424 4424 4424 4424 3318 US-CO-752 4424 4424 4424 4424 4424 4424 3318 US-WY-751 13272 13272 13272 13272 11060 7742 9954 US-CO-773 4424 4424 4424 4424 4424 4424 3318 US-CT 4424 4424 4424 4424 4424 4424 3318 US-CT-533 4424 4424 4424 4424 4424 4424 3318 US-DE 4424 4424 4424 4424 4424 4424 3318 US-PA-504 13272 13272 13272 13272 11060 8848 9954 US-MD-576 8848 8848 8848 8848 7742 6636 6636 US-DC 4424 4424 4424 4424 4424 4424 3318 US-FL 4424 4424 4424 4424 4424 4424 3318 US-FL-571 4424 4424 4424 4424 4424 4424 3318 US-FL-592 4424 4424 4424 4424 4424 4424 3318 US-GA-561 8848 8848 8848 8848 8848 8848 6636 US-FL-528 4424 4424 4424 4424 4424 4424 3318 US-FL-534 4424 4424 4424 4424 4424 4424 3318 US-FL-656 4424 4424 4424 4424 4424 4424 3318 US-GA-530 8848 8848 8848 8848 8848 8848 6636 US-FL-539 4424 4424 4424 4424 4424 4424 3318 US-FL-548 4424 4424 4424 4424 4424 4424 3318 US-GA 4424 4424 4424 4424 4424 4424 3318 US-GA-525 4424 4424 4424 4424 4424 4424 3318 US-GA-524 4424 4424 4424 4424 4424 4424 3318 US-SC-520 8848 8848 8848 8848 7742 6636 6636 US-TN-575 8848 8848 8848 8848 7742 6636 6636 US-GA-503 4424 4424 4424 4424 4424 4424 3318 US-SC-507 8848 8848 8848 8848 7742 6636 6636 US-HI 4424 4424 4424 4424 4424 4424 3318 US-HI-744 4424 4424 4424 4424 4424 4424 3318 US-ID 4424 4424 4424 4424 4424 4424 3318 US-OR-757 8848 8848 8848 8848 7742 6636 6636 US-WY-758 8848 8848 8848 8848 7742 5530 6636 US-WA-881 8848 8848 8848 8848 7742 5530 6636 US-ID-760 4424 4424 4424 4424 4424 4424 3318 US-IL 4424 4424 4424 4424 4424 4424 3318 US-IL-648 4424 4424 4424 4424 4424 4424 3318 US-IN-602 8848 8848 8848 8848 8848 8848 6636 US-IA-682 8848 8848 8848 8848 8848 8848 6636 US-KY-649 13272 13272 13272 13272 13272 11060 9954 US-MO-632 13272 13272 13272 13272 12166 8848 9954 US-IL-675 4424 4424 4424 4424 4424 4424 3318 US-MO-717 8848 8848 8848 8848 7742 6636 6636 US-IL-610 4424 4424 4424 4424 4424 4424 3318 US-MO-609 8848 8848 8848 8848 7742 6636 6636 US-IN-581 8848 8848 8848 8848 8848 8848 6636 US-IN 4424 4424 4424 4424 4424 4424 3318 US-OH-515 13272 13272 13272 13272 12166 8848 9954 US-OH-509 8848 8848 8848 8848 7742 6636 6636 US-IN-527 4424 4424 4424 4424 4424 4424 3318 US-IN-582 4424 4424 4424 4424 4424 4424 3318 US-KY-529 8848 8848 8848 8848 8848 6636 6636 US-MI-588 8848 8848 8848 8848 7742 6636 6636 US-IA 4424 4424 4424 4424 4424 4424 3318 US-IA-637 4424 4424 4424 4424 4424 4424 3318 US-IA-679 4424 4424 4424 4424 4424 4424 3318 US-NE-652 8848 8848 8848 8848 7742 6636 6636 US-MO-631 8848 8848 8848 8848 7742 6636 6636 US-MN-611 8848 8848 8848 8848 7742 6636 6636 US-NE-624 8848 8848 8848 8848 7742 6636 6636 US-KS 4424 4424 4424 4424 4424 4424 3318 US-MO-603 8848 8848 8848 8848 7742 6636 6636 US-MO-616 8848 8848 8848 8848 7742 6636 6636 US-MO-638 8848 8848 8848 8848 7742 6636 6636 US-KS-605 4424 4424 4424 4424 4424 4424 3318 US-KS-678 4424 4424 4424 4424 4424 4424 3318 US-KY 4424 4424 4424 4424 4424 4424 3318 US-KY-736 4424 4424 4424 4424 4424 4424 3318 US-WV-564 13272 13272 13272 13272 11060 7742 9954 US-TN-557 8848 8848 8848 8848 7742 3318 6636 US-KY-541 4424 4424 4424 4424 4424 2212 3318 US-TN-659 8848 8848 8848 8848 7742 3318 6636 US-VA-531 13272 13272 13272 13272 11060 4424 9954 US-LA 4424 4424 4424 4424 4424 2212 3318 US-LA-644 4424 4424 4424 4424 3318 2212 3318 US-MS-716 8848 8848 8848 8848 6636 4424 6636 US-LA-642 4424 4424 4424 4424 3318 2212 3318 US-LA-643 4424 4424 4424 4424 3318 2212 3318 US-LA-622 4424 4424 4424 4424 3318 2212 3318 US-ME 4424 4424 4424 4424 3318 2212 3318 US-ME-537 4424 4424 4424 4424 3318 2212 3318 US-NH-500 8848 8848 8848 8848 6636 4424 6636 US-ME-552 4424 4424 4424 4424 3318 2212 3318 US-MD 4424 4424 4424 4424 3318 2212 3318 US-MD-512 4424 4424 4424 4424 3318 2212 3318 US-WV-511 13272 13272 13272 13272 9954 4424 9954 US-MA 4424 4424 4424 4424 3318 2212 3318 US-NH-506 8848 8848 8848 8848 6636 4424 6636 US-MA-521 4424 4424 4424 4424 3318 2212 3318 US-MA-543 4424 4424 4424 4424 3318 2212 3318 US-MI 4424 4424 4424 4424 3318 2212 3318 US-MI-583 4424 4424 4424 4424 3318 2212 3318 US-MI-505 4424 4424 4424 4424 3318 2212 3318 US-MI-513 4424 4424 4424 4424 3318 2212 3318 US-MI-563 4424 4424 4424 4424 3318 2212 3318 US-MI-551 4424 4424 4424 4424 3318 2212 3318 US-MI-553 4424 4424 4424 4424 3318 2212 3318 US-OH-547 8848 8848 8848 8848 6636 4424 6636 US-MI-540 4424 4424 4424 4424 3318 2212 3318 US-MN 4424 4424 4424 4424 3318 2212 3318 US-WI-676 8848 8848 8848 8848 6636 3318 6636 US-ND-724 8848 8848 8848 8848 6636 4424 6636 US-WI-702 8848 8848 8848 8848 6636 3318 6636 US-MN-737 4424 4424 4424 4424 3318 2212 3318 US-WI-613 8848 8848 8848 8848 6636 3318 6636 US-MS 4424 4424 4424 4424 3318 2212 3318 US-MS-746 4424 4424 4424 4424 3318 2212 3318 US-MS-673 4424 4424 4424 4424 3318 2212 3318 US-MS-647 4424 4424 4424 4424 3318 2212 3318 US-MS-710 4424 4424 4424 4424 3318 2212 3318 US-MS-718 4424 4424 4424 4424 3318 2212 3318 US-MO 4424 4424 4424 4424 3318 2212 3318 US-MO-604 4424 4424 4424 4424 3318 2212 3318 US-MT 4424 4424 4424 4424 3318 2212 3318 US-WY-756 8848 8848 8848 8848 6636 3318 6636 US-MT-754 4424 4424 4424 4424 3318 2212 3318 US-MT-798 4424 4424 4424 4424 3318 2212 3318 US-MT-755 4424 4424 4424 4424 3318 2212 3318 US-MT-766 4424 4424 4424 4424 3318 2212 3318 US-ND-687 8848 8848 8848 8848 6636 4424 6636 US-MT-762 4424 4424 4424 4424 3318 2212 3318 US-NE 4424 4424 4424 4424 3318 2212 3318 US-WY-759 8848 8848 8848 8848 6636 3318 6636 US-NE-722 4424 4424 4424 4424 3318 2212 3318 US-NE-740 4424 4424 4424 4424 3318 2212 3318 US-SD-725 8848 8848 8848 8848 6636 4424 6636 US-NV 4424 4424 4424 4424 3318 2212 3318 US-NV-839 4424 4424 4424 4424 3318 2212 3318 US-WY-770 8848 8848 8848 8848 6636 3318 6636 US-NH 4424 4424 4424 4424 3318 2212 3318 US-VT-523 13272 13272 13272 13272 9954 5530 9954 US-NJ 4424 4424 4424 4424 3318 2212 3318 US-NY-501 8848 8848 8848 8848 6636 4424 6636 US-NM 4424 4424 4424 4424 3318 2212 3318 US-NM-790 4424 4424 4424 4424 3318 2212 3318 US-TX-634 13272 13272 13272 13272 9954 5530 9954 US-TX-765 8848 8848 8848 8848 6636 3318 6636 US-NY 4426 4426 4426 4426 3320 2214 3320 US-NY-532 4424 4424 4424 4424 3318 2212 3318 US-NY-502 4424 4424 4424 4424 3318 2212 3318 US-PA-514 8848 8848 8848 8848 6636 4424 6636 US-PA-565 8848 8848 8848 8848 6636 4424 6636 US-NY-538 4424 4424 4424 4424 3318 2212 3318 US-NY-555 4424 4424 4424 4424 3318 2212 3318 US-NY-526 4424 4424 4424 4424 3318 2212 3318 US-NY-549 4424 4424 4424 4424 3318 2212 3318 US-NC 4424 4424 4424 4424 3318 2212 3318 US-SC-517 8848 8848 8848 8848 6636 4424 6636 US-SC-570 8848 8848 8848 8848 6636 4424 6636 US-NC-518 4424 4424 4424 4424 3318 2212 3318 US-NC-545 4424 4424 4424 4424 3318 2212 3318 US-SC-567 8848 8848 8848 8848 6636 4424 6636 US-VA-544 8848 8848 8848 8848 6636 3318 6636 US-NC-560 4424 4424 4424 4424 3318 2212 3318 US-NC-550 4424 4424 4424 4424 3318 2212 3318 US-ND 4424 4424 4424 4424 3318 2212 3318 US-OH 4424 4424 4424 4424 3318 2212 3318 US-OH-510 4424 4424 4424 4424 3318 2212 3318 US-OH-535 4424 4424 4424 4424 3318 2212 3318 US-OH-542 4424 4424 4424 4424 3318 2212 3318 US-OH-558 4424 4424 4424 4424 3318 2212 3318 US-WV-597 8848 8848 8848 8848 6636 3318 6636 US-WV-554 8848 8848 8848 8848 6636 3318 6636 US-PA-536 8848 8848 8848 8848 6636 4424 6636 US-OH-596 4424 4424 4424 4424 3318 2212 3318 US-OK 4424 4424 4424 4424 3318 2212 3318 US-OK-650 4424 4424 4424 4424 3318 2212 3318 US-TX-657 8848 8848 8848 8848 6636 3318 6636 US-OK-671 4424 4424 4424 4424 3318 2212 3318 US-TX-627 8848 8848 8848 8848 6636 3318 6636 US-OR 4424 4424 4424 4424 3318 2212 3318 US-OR-821 4424 4424 4424 4424 3318 2212 3318 US-OR-801 4424 4424 4424 4424 3318 2212 3318 US-WA-820 8848 8848 8848 8848 6636 3318 6636 US-WA-810 8848 8848 8848 8848 6636 3318 6636 US-PA 4424 4424 4424 4424 3318 2212 3318 US-PA-516 4424 4424 4424 4424 3318 2212 3318 US-PA-566 4424 4424 4424 4424 3318 2212 3318 US-PA-574 4424 4424 4424 4424 3318 2212 3318 US-PA-508 4424 4424 4424 4424 3318 2212 3318 US-PA-577 4424 4424 4424 4424 3318 2212 3318 US-RI 4424 4424 4424 4424 3318 2212 3318 US-SC 4424 4424 4424 4424 3318 2212 3318 US-SC-519 4424 4424 4424 4424 3318 2212 3318 US-SC-546 4424 4424 4424 4424 3318 2212 3318 US-SD 4424 4424 4424 4424 3318 2212 3318 US-WY-764 8848 8848 8848 8848 6636 3318 6636 US-TN 4424 4424 4424 4424 3318 2212 3318 US-TN-639 4424 4424 4424 4424 3318 1106 3318 US-TX 4424 4424 4424 4424 3318 1106 3318 US-TX-662 4424 4424 4424 4424 3318 1106 3318 US-TX-635 4424 4424 4424 4424 3318 1106 3318 US-TX-692 4424 4424 4424 4424 3318 1106 3318 US-TX-600 4424 4424 4424 4424 3318 1106 3318 US-TX-623 4424 4424 4424 4424 3318 1106 3318 US-TX-636 4424 4424 4424 4424 3318 1106 3318 US-TX-618 4424 4424 4424 4424 3318 1106 3318 US-TX-749 4424 4424 4424 4424 3318 1106 3318 US-TX-651 4424 4424 4424 4424 3318 1106 3318 US-TX-633 4424 4424 4424 4424 3318 1106 3318 US-TX-661 4424 4424 4424 4424 3318 1106 3318 US-TX-641 4424 4424 4424 4424 3318 1106 3318 US-TX-709 4424 4424 4424 4424 3318 1106 3318 US-TX-626 4424 4424 4424 4424 3318 1106 3318 US-TX-625 4424 4424 4424 4424 3318 1106 3318 US-UT 4424 4424 4424 4424 3318 1106 3318 US-VT 4424 4424 4424 4424 3318 1106 3318 US-VA 4424 4424 4424 4424 3318 1106 3318 US-WV-559 8848 8848 8848 8848 6636 2212 6636 US-VA-584 4424 4424 4424 4424 3318 1106 3318 US-WV-569 8848 8848 8848 8848 6636 2212 6636 US-VA-556 4424 4424 4424 4424 3318 1106 3318 US-VA-573 4424 4424 4424 4424 3318 1106 3318 US-WA 4424 4424 4424 4424 3318 1106 3318 US-WA-819 4424 4424 4424 4424 3318 1106 3318 US-WV 4424 4424 4424 4424 3318 1106 3318 US-WV-598 4424 4424 4424 4424 3318 1106 3318 US-WI 4424 4424 4424 4424 3318 1106 3318 US-WI-658 4424 4424 4424 4424 3318 1106 3318 US-WI-669 4424 4424 4424 4424 3318 1106 3318 US-WI-617 4424 4424 4424 4424 3318 1106 3318 US-WI-705 4424 4424 4424 4424 3318 1106 3318 US-WY 4424 4424 4424 4424 3318 1106 3318 US-WY-767 4424 4424 4424 4424 3318 1106 3318"},{"location":"Framework/","title":"Framework","text":""},{"location":"Framework/#components","title":"Components","text":"<p>The Framework aspect of this repository consists of the following components:</p> <ol> <li>The <code>GOOGLE_API_KEY</code> environment variable, which may be stored in a <code>.env</code> file.</li> <li>A pair of <code>scope</code> files to define the main collection targets.</li> <li><code>scripts</code> to define different collection tasks.</li> <li>A <code>data</code> output directory to write results to.</li> </ol> <p>These make up a structure around which data are collected. By default, they are assumed to be in the root directory, but each can be redirected with function arguments.</p>"},{"location":"Framework/#automatic-updates","title":"Automatic Updates","text":"<p>On top of those components, the <code>.github/workflows/weekply_collection.yaml</code> file defines a GitHub action used to perform regular updates.</p> <p>This depends on the <code>GOOGLE_API_KEY</code> being defined in actions secretes (Settings &gt; Secrets and variables &gt; ACtions &gt; Secrets) and actions having write permissions (Settings &gt; Actions &gt; General &gt; Workflow permissions).</p>"}]}